export class FuseOptions {
    isCaseSensitive;
    distance;
    findAllMatches;
    ignoreLocation;
    ignoreFieldNorm;
    includeMatches;
    includeScore;
    location;
    minMatchCharLength;
    shouldSort;
    threshold;
    useExtendedSearch;
    keys;
    constructor(options, keys) {
        // Si se desea cambiar algun valor por default, este es el lugar indicado
        if (!keys) {
            keys = [];
        }
        const defaultOptions = {
            // Se activa includeScore para poder buscar internamente en propiedades de tipo array
            includeScore: true,
            // Se reduce a 0.3 el threshold (default: 0.6) para aumentar precisi√≥n en resultados
            threshold: 0.3
        };
        if (options) {
            options = { ...defaultOptions, ...options };
        }
        else {
            options = defaultOptions;
        }
        Object.assign(this, { ...options, keys: keys });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGlwZXMvc3JjL2xpYi9zZWFyY2gvc2VhcmNoLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdDQSxNQUFNLE9BQU8sV0FBVztJQUN0QixlQUFlLENBQVc7SUFDMUIsUUFBUSxDQUFVO0lBQ2xCLGNBQWMsQ0FBVztJQUN6QixjQUFjLENBQVc7SUFDekIsZUFBZSxDQUFXO0lBQzFCLGNBQWMsQ0FBVztJQUN6QixZQUFZLENBQVc7SUFDdkIsUUFBUSxDQUFVO0lBQ2xCLGtCQUFrQixDQUFVO0lBQzVCLFVBQVUsQ0FBVztJQUNyQixTQUFTLENBQVU7SUFDbkIsaUJBQWlCLENBQVc7SUFDNUIsSUFBSSxDQUFnQjtJQUVwQixZQUFZLE9BQWlCLEVBQUUsSUFBb0I7UUFDakQseUVBQXlFO1FBQ3pFLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1g7UUFFRCxNQUFNLGNBQWMsR0FBRztZQUNyQixxRkFBcUY7WUFDckYsWUFBWSxFQUFFLElBQUk7WUFDbEIsb0ZBQW9GO1lBQ3BGLFNBQVMsRUFBRSxHQUFHO1NBQ2YsQ0FBQztRQUVGLElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxHQUFHLEVBQUMsR0FBRyxjQUFjLEVBQUUsR0FBRyxPQUFPLEVBQUMsQ0FBQztTQUMzQzthQUFNO1lBQ0wsT0FBTyxHQUFHLGNBQWMsQ0FBQztTQUMxQjtRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJRnVzZVJlc3VsdCB7XG4gIGl0ZW06IGFueTtcbiAgcmVmSW5kZXg6IG51bWJlcjtcbiAgc2NvcmU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT3B0aW9ucyB7XG4gIGlzQ2FzZVNlbnNpdGl2ZT86IGJvb2xlYW47IC8vIEluZGljYSBzaSBsYXMgY29tcGFyYWNpb25lcyBkZWJlbiBzZXIgc2Vuc2libGVzIGEgbWF5w7pzY3VsYXMgeSBtaW7DunNjdWxhcy4gKGRlZjogZmFsc2UpXG4gIGluY2x1ZGVTY29yZT86IGJvb2xlYW47IC8vIFNpIGxhIHB1bnR1YWNpw7NuIGRlYmUgaW5jbHVpcnNlIGVuIGVsIGNvbmp1bnRvIGRlIHJlc3VsdGFkb3MuIFVuYSBwdW50dWFjacOzbiBkZSAwIGluZGljYSB1bmEgY29pbmNpZGVuY2lhIHBlcmZlY3RhLCBtaWVudHJhcyBxdWUgdW5hIHB1bnR1YWNpw7NuIGRlIDEgaW5kaWNhIHVuYSBmYWx0YSBkZSBjb2luY2lkZW5jaWEgY29tcGxldGEuIChkZWY6IGZhbHNlKVxuICBpbmNsdWRlTWF0Y2hlcz86IGJvb2xlYW47IC8vIFNpIGxhcyBjb2luY2lkZW5jaWFzIGRlYmVuIGluY2x1aXJzZSBlbiBlbCBjb25qdW50byBkZSByZXN1bHRhZG9zLiBDdWFuZG8gZXMgdmVyZGFkZXJvLCBjYWRhIHJlZ2lzdHJvIGVuIGVsIGNvbmp1bnRvIGRlIHJlc3VsdGFkb3MgaW5jbHVpcsOhIGxvcyDDrW5kaWNlcyBkZSBsb3MgY2FyYWN0ZXJlcyBjb2luY2lkZW50ZXMuIEVuIGNvbnNlY3VlbmNpYSwgc2UgcHVlZGVuIHVzYXIgcGFyYSByZXNhbHRhci4oZGVmOiBmYWxzZSlcbiAgc2hvdWxkU29ydD86IGJvb2xlYW47IC8vIFNpIHNlIGRlYmUgb3JkZW5hciBsYSBsaXN0YSBkZSByZXN1bHRhZG9zIHBvciBwdW50dWFjacOzbi4gKGRlZjogdHJ1ZSlcbiAgZmluZEFsbE1hdGNoZXM/OiBib29sZWFuOyAvLyBDdWFuZG8gZXMgdmVyZGFkZXJvLCBsYSBmdW5jacOzbiBkZSBjb2luY2lkZW5jaWEgY29udGludWFyw6EgaGFzdGEgZWwgZmluYWwgZGUgdW4gcGF0csOzbiBkZSBiw7pzcXVlZGEsIGluY2x1c28gc2kgeWEgc2UgaGEgZW5jb250cmFkbyB1bmEgY29pbmNpZGVuY2lhIHBlcmZlY3RhIGVuIGxhIGNhZGVuYS4gKGRlZjogZmFsc2UpXG4gIG1pbk1hdGNoQ2hhckxlbmd0aD86IG51bWJlcjsgLy8gU29sbyBzZSBkZXZvbHZlcsOhbiBsYXMgY29pbmNpZGVuY2lhcyBjdXlhIGxvbmdpdHVkIGV4Y2VkYSBlc3RlIHZhbG9yLiAoUG9yIGVqZW1wbG8sIHNpIGRlc2VhIGlnbm9yYXIgbGFzIGNvaW5jaWRlbmNpYXMgZGUgdW4gc29sbyBjYXLDoWN0ZXIgZW4gZWwgcmVzdWx0YWRvLCBjb25maWfDunJlbG8gZW4gMikuIChkZWY6IDEpXG4gIGxvY2F0aW9uPzogbnVtYmVyOyAvLyBEZXRlcm1pbmEgYXByb3hpbWFkYW1lbnRlIGVuIHF1w6kgcGFydGUgZGVsIHRleHRvIHNlIGVuY3VlbnRyYSBlbCBwYXRyw7NuIHF1ZSBzZSBlc3BlcmEgZW5jb250cmFyLiAoZGVmOiAwKVxuICB0aHJlc2hvbGQ/OiBudW1iZXI7IC8vIMK/RW4gcXXDqSBwdW50byBzZSByaW5kZSBlbCBhbGdvcml0bW8gZGUgY29pbmNpZGVuY2lhPyBVbiB1bWJyYWwgZGUgMC4wIHJlcXVpZXJlIHVuYSBjb2luY2lkZW5jaWEgcGVyZmVjdGEgKHRhbnRvIGRlIGxldHJhcyBjb21vIGRlIHViaWNhY2nDs24pLCB1biB1bWJyYWwgZGUgMS4wIGNvaW5jaWRpcsOtYSBjb24gY3VhbHF1aWVyIGNvc2EuIChkZWY6IDAuNilcbiAgZGlzdGFuY2U/OiBudW1iZXI7IC8vIERldGVybWluYSBxdcOpIHRhbiBjZXJjYSBkZWJlIGVzdGFyIGxhIGNvaW5jaWRlbmNpYSBkZSBsYSB1YmljYWNpw7NuIGRpZnVzYSAoZXNwZWNpZmljYWRhIHBvciBsYSB1YmljYWNpw7NuKS4gVW5hIGNvaW5jaWRlbmNpYSBleGFjdGEgZGUgbGV0cmFzLCBxdWUgZXMgbGEgZGlzdGFuY2lhIGRlIGxvcyBjYXJhY3RlcmVzIGxlam9zIGRlIGxhIHViaWNhY2nDs24gZGlmdXNhLCBzZSBjb25zaWRlcmFyw61hIGNvbW8gdW5hIGZhbHRhIGRlIGNvaW5jaWRlbmNpYSBjb21wbGV0YS4gVW5hIGRpc3RhbmNpYSBkZSAwIHJlcXVpZXJlIHF1ZSBsYSBjb2luY2lkZW5jaWEgZXN0w6kgZW4gbGEgdWJpY2FjacOzbiBleGFjdGEgZXNwZWNpZmljYWRhLiBVbmEgZGlzdGFuY2lhIGRlIDEwMDAgcmVxdWVyaXLDrWEgdW5hIGNvaW5jaWRlbmNpYSBwZXJmZWN0YSBwYXJhIGVzdGFyIGRlbnRybyBkZSBsb3MgODAwIGNhcmFjdGVyZXMgZGUgbGEgdWJpY2FjacOzbiBxdWUgc2UgZW5jdWVudHJhIHV0aWxpemFuZG8gdW4gdW1icmFsIGRlIDAsOC4gKGRlZjogMTAwKVxuICB1c2VFeHRlbmRlZFNlYXJjaD86IGJvb2xlYW47IC8vIEN1YW5kbyBlcyB2ZXJkYWRlcm8sIHBlcm1pdGUgZWwgdXNvIGRlIGNvbWFuZG9zIGRlIGLDunNxdWVkYSB0aXBvIFVuaXguIChkZWY6IGZhbHNlKVxuICBpZ25vcmVMb2NhdGlvbj86IGJvb2xlYW47IC8vIEN1YW5kbyBlcyB2ZXJkYWRlcm8sIGxhIGLDunNxdWVkYSBpZ25vcmFyw6EgbGEgdWJpY2FjacOzbiB5IGxhIGRpc3RhbmNpYSwgcG9yIGxvIHF1ZSBubyBpbXBvcnRhcsOhIGVuIHF1w6kgcGFydGUgZGUgbGEgY2FkZW5hIGFwYXJlemNhIGVsIHBhdHLDs24uIChkZWY6IGZhbHNlKVxuICBpZ25vcmVGaWVsZE5vcm0/OiBib29sZWFuOyAvLyBDdWFuZG8gZXMgdmVyZGFkZXJvLCBlbCBjw6FsY3VsbyBkZSBsYSBwdW50dWFjacOzbiBkZSByZWxldmFuY2lhICh1dGlsaXphZGEgcGFyYSBsYSBjbGFzaWZpY2FjacOzbikgaWdub3JhcsOhIGxhIG5vcm1hIGRlIGxvbmdpdHVkIGRlIGNhbXBvLlxuICAvLyBnZXRGbj86IEZ1bmN0aW9uOyAvLyBMYSBmdW5jacOzbiBxdWUgc2UgdXRpbGl6YSBwYXJhIHJlY3VwZXJhciBlbCB2YWxvciBkZSB1biBvYmpldG8gZW4gbGEgcnV0YSBwcm9wb3JjaW9uYWRhLiBFbCB2YWxvciBwcmVkZXRlcm1pbmFkbyB0YW1iacOpbiBidXNjYXLDoSBydXRhcyBhbmlkYWRhcy5cbiAgLy8gc29ydEZuPzogRnVuY3Rpb247IC8vIExhIGZ1bmNpw7NuIGEgdXRpbGl6YXIgcGFyYSBvcmRlbmFyIHRvZG9zIGxvcyByZXN1bHRhZG9zLiBFbCB2YWxvciBwcmVkZXRlcm1pbmFkbyBzZSBvcmRlbmFyw6EgcG9yIHB1bnR1YWNpw7NuIGRlIHJlbGV2YW5jaWEgYXNjZW5kZW50ZVxufVxuLyoqXG4gKiBOT1RBOlxuICogLSBQYXJhIGNvbXByZW5kZXIgbWVqb3IgY8OzbW8gbG9jYXRpb24sIHRocmVzaG9sZCB5IGRpc3RhbmNlIGZ1bmNpb25hbiBqdW50b3MsIGxlZXIgZW4gaHR0cHM6Ly9mdXNlanMuaW8vY29uY2VwdHMvc2NvcmluZy10aGVvcnkuaHRtbCNzY29yaW5nLXRoZW9yeVxuICogLSBFbCDDum5pY28gbW9tZW50byBlbiBxdWUgdGllbmUgc2VudGlkbyBlc3RhYmxlY2VyIGlnbm9yZUZpZWxkTm9ybSBlbiB0cnVlIGVzIGN1YW5kbyBubyBpbXBvcnRhIGN1w6FudG9zIHTDqXJtaW5vcyBoYXlhLCBzaW5vIHNvbG8gcXVlIGVsIHTDqXJtaW5vIGRlIGNvbnN1bHRhIGV4aXN0YS5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIElGdXNlT3B0aW9ucyBleHRlbmRzIElPcHRpb25zIHtcbiAga2V5cz86IEFycmF5PHN0cmluZz47XG59XG5cbmV4cG9ydCBjbGFzcyBGdXNlT3B0aW9ucyBpbXBsZW1lbnRzIElGdXNlT3B0aW9ucyB7XG4gIGlzQ2FzZVNlbnNpdGl2ZT86IGJvb2xlYW47XG4gIGRpc3RhbmNlPzogbnVtYmVyO1xuICBmaW5kQWxsTWF0Y2hlcz86IGJvb2xlYW47XG4gIGlnbm9yZUxvY2F0aW9uPzogYm9vbGVhbjtcbiAgaWdub3JlRmllbGROb3JtPzogYm9vbGVhbjtcbiAgaW5jbHVkZU1hdGNoZXM/OiBib29sZWFuO1xuICBpbmNsdWRlU2NvcmU/OiBib29sZWFuO1xuICBsb2NhdGlvbj86IG51bWJlcjtcbiAgbWluTWF0Y2hDaGFyTGVuZ3RoPzogbnVtYmVyO1xuICBzaG91bGRTb3J0PzogYm9vbGVhbjtcbiAgdGhyZXNob2xkPzogbnVtYmVyO1xuICB1c2VFeHRlbmRlZFNlYXJjaD86IGJvb2xlYW47XG4gIGtleXM6IEFycmF5PHN0cmluZz47XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogSU9wdGlvbnMsIGtleXM/OiBBcnJheTxzdHJpbmc+KSB7XG4gICAgLy8gU2kgc2UgZGVzZWEgY2FtYmlhciBhbGd1biB2YWxvciBwb3IgZGVmYXVsdCwgZXN0ZSBlcyBlbCBsdWdhciBpbmRpY2Fkb1xuICAgIGlmICgha2V5cykge1xuICAgICAga2V5cyA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgLy8gU2UgYWN0aXZhIGluY2x1ZGVTY29yZSBwYXJhIHBvZGVyIGJ1c2NhciBpbnRlcm5hbWVudGUgZW4gcHJvcGllZGFkZXMgZGUgdGlwbyBhcnJheVxuICAgICAgaW5jbHVkZVNjb3JlOiB0cnVlLFxuICAgICAgLy8gU2UgcmVkdWNlIGEgMC4zIGVsIHRocmVzaG9sZCAoZGVmYXVsdDogMC42KSBwYXJhIGF1bWVudGFyIHByZWNpc2nDs24gZW4gcmVzdWx0YWRvc1xuICAgICAgdGhyZXNob2xkOiAwLjNcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7Li4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7Li4ub3B0aW9ucywga2V5czoga2V5c30pO1xuICB9XG59XG4iXX0=