import { FuseOptions } from './search.model';
import { Pipe } from '@angular/core';
import Fuse from 'fuse.js';
import * as i0 from "@angular/core";
export class BizySearchPipe {
    fuseOptions;
    fuse;
    items;
    perfectMatch = {
        threshold: 0.0
    };
    transform(items, search, keys, options) {
        if (typeof search === 'undefined' || search === null || search === '' || (Array.isArray(search) && search.length === 0)) {
            return items;
        }
        if (keys && !Array.isArray(keys)) {
            keys = [keys];
        }
        else if (!keys) {
            keys = [];
        }
        if (!Array.isArray(search)) {
            search = [this.#removeAccentsAndDiacritics(String(search))];
        }
        else {
            search = search.map(_search => this.#removeAccentsAndDiacritics(String(_search)));
        }
        let output = items;
        // Remove empty items
        search = search.filter(n => n);
        search.forEach(_keyword => {
            // Apply perfect match if "search" is a number or is an email
            const searchIsText = isNaN(Number(_keyword)) && !String(_keyword).includes('@');
            if (!searchIsText) {
                this.fuseOptions = new FuseOptions({ ...options, ...this.perfectMatch }, keys);
                this.fuse = new Fuse(output, this.fuseOptions);
            }
            else {
                this.fuseOptions = new FuseOptions(options, keys);
                this.fuse = new Fuse(output, this.fuseOptions);
            }
            const fuseResult = this.fuse.search(String(_keyword));
            // Get each fuse result item
            output = fuseResult.map(match => match.item);
        });
        return output;
    }
    #removeAccentsAndDiacritics(search) {
        if (!search) {
            return '';
        }
        return search.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizySearchPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: BizySearchPipe, name: "bizySearch" });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizySearchPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bizySearch'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9waXBlcy9zcmMvbGliL3NlYXJjaC9zZWFyY2gucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQTRCLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQzs7QUFJM0IsTUFBTSxPQUFPLGNBQWM7SUFDekIsV0FBVyxDQUFlO0lBQzFCLElBQUksQ0FBWTtJQUNoQixLQUFLLENBQWlCO0lBRWIsWUFBWSxHQUFHO1FBQ3RCLFNBQVMsRUFBRSxHQUFHO0tBQ2YsQ0FBQztJQUVGLFNBQVMsQ0FDUCxLQUFlLEVBQ2YsTUFBZ0QsRUFDaEQsSUFBNkIsRUFDN0IsT0FBc0I7UUFFdEIsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3ZILE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDZjthQUFNLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDaEIsSUFBSSxHQUFHLEVBQUUsQ0FBQTtTQUNWO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDN0Q7YUFBTTtZQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDbEY7UUFFRCxJQUFJLE1BQU0sR0FBYSxLQUFLLENBQUM7UUFDN0IscUJBQXFCO1FBQ3JCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4Qiw2REFBNkQ7WUFDN0QsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVoRixJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUMsR0FBRyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFDLEVBQUUsSUFBcUIsQ0FBQyxDQUFDO2dCQUM5RixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDaEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxPQUFRLEVBQUUsSUFBcUIsQ0FBQyxDQUFDO2dCQUNwRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDaEQ7WUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQXVCLENBQUM7WUFDNUUsNEJBQTRCO1lBQzVCLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELDJCQUEyQixDQUFDLE1BQWM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFFLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7d0dBM0RVLGNBQWM7c0dBQWQsY0FBYzs7NEZBQWQsY0FBYztrQkFIMUIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsWUFBWTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lGdXNlT3B0aW9ucywgSUZ1c2VSZXN1bHQsIEZ1c2VPcHRpb25zfSBmcm9tICcuL3NlYXJjaC5tb2RlbCc7XG5pbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IEZ1c2UgZnJvbSAnZnVzZS5qcyc7XG5AUGlwZSh7XG4gIG5hbWU6ICdiaXp5U2VhcmNoJ1xufSlcbmV4cG9ydCBjbGFzcyBCaXp5U2VhcmNoUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBmdXNlT3B0aW9uczogSUZ1c2VPcHRpb25zO1xuICBmdXNlOiBGdXNlPGFueT47XG4gIGl0ZW1zOiBBcnJheTx1bmtub3duPjtcblxuICByZWFkb25seSBwZXJmZWN0TWF0Y2ggPSB7XG4gICAgdGhyZXNob2xkOiAwLjBcbiAgfTtcblxuICB0cmFuc2Zvcm08VD4oXG4gICAgaXRlbXM6IEFycmF5PFQ+LFxuICAgIHNlYXJjaDogc3RyaW5nIHwgbnVtYmVyIHwgQXJyYXk8c3RyaW5nIHwgbnVtYmVyPixcbiAgICBrZXlzPzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPixcbiAgICBvcHRpb25zPzogSUZ1c2VPcHRpb25zXG4gICk6IEFycmF5PFQ+IHtcbiAgICBpZiAodHlwZW9mIHNlYXJjaCA9PT0gJ3VuZGVmaW5lZCcgfHwgc2VhcmNoID09PSBudWxsIHx8IHNlYXJjaCA9PT0gJycgfHwgKEFycmF5LmlzQXJyYXkoc2VhcmNoKSAmJiBzZWFyY2gubGVuZ3RoID09PSAwKSkge1xuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cblxuICAgIGlmIChrZXlzICYmICFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICBrZXlzID0gW2tleXNdO1xuICAgIH0gZWxzZSBpZiAoIWtleXMpIHtcbiAgICAgIGtleXMgPSBbXVxuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShzZWFyY2gpKSB7XG4gICAgICBzZWFyY2ggPSBbdGhpcy4jcmVtb3ZlQWNjZW50c0FuZERpYWNyaXRpY3MoU3RyaW5nKHNlYXJjaCkpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VhcmNoID0gc2VhcmNoLm1hcChfc2VhcmNoID0+IHRoaXMuI3JlbW92ZUFjY2VudHNBbmREaWFjcml0aWNzKFN0cmluZyhfc2VhcmNoKSkpXG4gICAgfVxuXG4gICAgbGV0IG91dHB1dDogQXJyYXk8VD4gPSBpdGVtcztcbiAgICAvLyBSZW1vdmUgZW1wdHkgaXRlbXNcbiAgICBzZWFyY2ggPSBzZWFyY2guZmlsdGVyKG4gPT4gbik7XG4gICAgc2VhcmNoLmZvckVhY2goX2tleXdvcmQgPT4ge1xuICAgICAgLy8gQXBwbHkgcGVyZmVjdCBtYXRjaCBpZiBcInNlYXJjaFwiIGlzIGEgbnVtYmVyIG9yIGlzIGFuIGVtYWlsXG4gICAgICBjb25zdCBzZWFyY2hJc1RleHQgPSBpc05hTihOdW1iZXIoX2tleXdvcmQpKSAmJiAhU3RyaW5nKF9rZXl3b3JkKS5pbmNsdWRlcygnQCcpO1xuXG4gICAgICBpZiAoIXNlYXJjaElzVGV4dCkge1xuICAgICAgICB0aGlzLmZ1c2VPcHRpb25zID0gbmV3IEZ1c2VPcHRpb25zKHsuLi5vcHRpb25zLCAuLi50aGlzLnBlcmZlY3RNYXRjaH0sIGtleXMgYXMgQXJyYXk8c3RyaW5nPik7XG4gICAgICAgIHRoaXMuZnVzZSA9IG5ldyBGdXNlKG91dHB1dCwgdGhpcy5mdXNlT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZ1c2VPcHRpb25zID0gbmV3IEZ1c2VPcHRpb25zKG9wdGlvbnMhLCBrZXlzIGFzIEFycmF5PHN0cmluZz4pO1xuICAgICAgICB0aGlzLmZ1c2UgPSBuZXcgRnVzZShvdXRwdXQsIHRoaXMuZnVzZU9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmdXNlUmVzdWx0ID0gdGhpcy5mdXNlLnNlYXJjaChTdHJpbmcoX2tleXdvcmQpKSBhcyBBcnJheTxJRnVzZVJlc3VsdD47XG4gICAgICAvLyBHZXQgZWFjaCBmdXNlIHJlc3VsdCBpdGVtXG4gICAgICBvdXRwdXQgPSBmdXNlUmVzdWx0Lm1hcChtYXRjaCA9PiBtYXRjaC5pdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgI3JlbW92ZUFjY2VudHNBbmREaWFjcml0aWNzKHNlYXJjaDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIXNlYXJjaCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2gubm9ybWFsaXplKCdORkQnKSEucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpO1xuICB9XG59XG4iXX0=