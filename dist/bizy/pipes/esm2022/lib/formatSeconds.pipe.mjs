import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class BizyFormatSecondsPipe {
    transform(seconds, language = 'es') {
        if (!seconds) {
            return '00:00:00';
        }
        const DAY = language === 'es' ? 'Día' : 'Day';
        const DAYS = language === 'es' ? 'Días' : 'Days';
        const MONTH = language === 'es' ? 'Mes' : 'Meses';
        const MONTHS = language === 'es' ? 'Meses' : 'Months';
        const YEAR = language === 'es' ? 'Año' : 'Year';
        const YEARS = language === 'es' ? 'Años' : 'Years';
        let _seconds = Number(seconds);
        const SECONDS_IN_YEAR = 365.25 * 24 * 3600;
        const SECONDS_IN_MONTH = 30.44 * 24 * 3600;
        const SECONDS_IN_DAY = 24 * 3600;
        const SECONDS_IN_HOUR = 3600;
        const SECONDS_IN_MINUTE = 60;
        const years = Math.floor(_seconds / SECONDS_IN_YEAR);
        _seconds %= SECONDS_IN_YEAR;
        const months = Math.floor(_seconds / SECONDS_IN_MONTH);
        _seconds %= SECONDS_IN_MONTH;
        const days = Math.floor(_seconds / SECONDS_IN_DAY);
        _seconds %= SECONDS_IN_DAY;
        const hours = Math.floor(_seconds / SECONDS_IN_HOUR);
        _seconds %= SECONDS_IN_HOUR;
        const minutes = Math.floor(_seconds / SECONDS_IN_MINUTE);
        _seconds %= SECONDS_IN_MINUTE;
        const parts = [];
        if (years > 0) {
            parts.push(years + (years === 1 ? ` ${YEAR}` : ` ${YEARS}`));
        }
        if (months > 0) {
            parts.push(months + (months === 1 ? ` ${MONTH}` : ` ${MONTHS}`));
        }
        if (days > 0) {
            parts.push(days + (days === 1 ? ` ${DAY}` : ` ${DAYS}`));
        }
        parts.push(`${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}:${_seconds < 10 ? '0' + Math.trunc(_seconds) : Math.trunc(_seconds)}`);
        return parts.join(' ');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyFormatSecondsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: BizyFormatSecondsPipe, name: "bizyFormatSeconds" });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyFormatSecondsPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bizyFormatSeconds'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0U2Vjb25kcy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGlwZXMvc3JjL2xpYi9mb3JtYXRTZWNvbmRzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBS3BELE1BQU0sT0FBTyxxQkFBcUI7SUFFOUIsU0FBUyxDQUFDLE9BQWUsRUFBRSxXQUF3QixJQUFJO1FBQ25ELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixPQUFPLFVBQVUsQ0FBQztTQUNyQjtRQUVELE1BQU0sR0FBRyxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzlDLE1BQU0sSUFBSSxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ2pELE1BQU0sS0FBSyxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2xELE1BQU0sTUFBTSxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ3RELE1BQU0sSUFBSSxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ2hELE1BQU0sS0FBSyxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRW5ELElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQixNQUFNLGVBQWUsR0FBRyxNQUFNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQyxNQUFNLGdCQUFnQixHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNDLE1BQU0sY0FBYyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDakMsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzdCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBRTdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELFFBQVEsSUFBSSxlQUFlLENBQUM7UUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztRQUN2RCxRQUFRLElBQUksZ0JBQWdCLENBQUM7UUFDN0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLENBQUM7UUFDbkQsUUFBUSxJQUFJLGNBQWMsQ0FBQztRQUMzQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsQ0FBQztRQUNyRCxRQUFRLElBQUksZUFBZSxDQUFDO1FBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLGlCQUFpQixDQUFDLENBQUM7UUFDekQsUUFBUSxJQUFJLGlCQUFpQixDQUFDO1FBRTlCLE1BQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7UUFDaEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNoRTtRQUVELElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNaLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDVixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBR0QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWpLLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO3dHQWxEUSxxQkFBcUI7c0dBQXJCLHFCQUFxQjs7NEZBQXJCLHFCQUFxQjtrQkFIakMsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsbUJBQW1CO2lCQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoe1xuICBuYW1lOiAnYml6eUZvcm1hdFNlY29uZHMnXG59KVxuZXhwb3J0IGNsYXNzIEJpenlGb3JtYXRTZWNvbmRzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgdHJhbnNmb3JtKHNlY29uZHM6IG51bWJlciwgbGFuZ3VhZ2U6ICdlcycgfCAnZW4nID0gJ2VzJyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghc2Vjb25kcykge1xuICAgICAgICAgICAgcmV0dXJuICcwMDowMDowMCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBEQVkgPSBsYW5ndWFnZSA9PT0gJ2VzJyA/ICdEw61hJyA6ICdEYXknO1xuICAgICAgICBjb25zdCBEQVlTID0gbGFuZ3VhZ2UgPT09ICdlcycgPyAnRMOtYXMnIDogJ0RheXMnO1xuICAgICAgICBjb25zdCBNT05USCA9IGxhbmd1YWdlID09PSAnZXMnID8gJ01lcycgOiAnTWVzZXMnO1xuICAgICAgICBjb25zdCBNT05USFMgPSBsYW5ndWFnZSA9PT0gJ2VzJyA/ICdNZXNlcycgOiAnTW9udGhzJztcbiAgICAgICAgY29uc3QgWUVBUiA9IGxhbmd1YWdlID09PSAnZXMnID8gJ0HDsW8nIDogJ1llYXInO1xuICAgICAgICBjb25zdCBZRUFSUyA9IGxhbmd1YWdlID09PSAnZXMnID8gJ0HDsW9zJyA6ICdZZWFycyc7XG5cbiAgICAgICAgbGV0IF9zZWNvbmRzID0gTnVtYmVyKHNlY29uZHMpO1xuXG4gICAgICAgIGNvbnN0IFNFQ09ORFNfSU5fWUVBUiA9IDM2NS4yNSAqIDI0ICogMzYwMDtcbiAgICAgICAgY29uc3QgU0VDT05EU19JTl9NT05USCA9IDMwLjQ0ICogMjQgKiAzNjAwO1xuICAgICAgICBjb25zdCBTRUNPTkRTX0lOX0RBWSA9IDI0ICogMzYwMDtcbiAgICAgICAgY29uc3QgU0VDT05EU19JTl9IT1VSID0gMzYwMDtcbiAgICAgICAgY29uc3QgU0VDT05EU19JTl9NSU5VVEUgPSA2MDtcblxuICAgICAgICBjb25zdCB5ZWFycyA9IE1hdGguZmxvb3IoX3NlY29uZHMgLyBTRUNPTkRTX0lOX1lFQVIpO1xuICAgICAgICBfc2Vjb25kcyAlPSBTRUNPTkRTX0lOX1lFQVI7XG4gICAgICAgIGNvbnN0IG1vbnRocyA9IE1hdGguZmxvb3IoX3NlY29uZHMgLyBTRUNPTkRTX0lOX01PTlRIKTtcbiAgICAgICAgX3NlY29uZHMgJT0gU0VDT05EU19JTl9NT05USDtcbiAgICAgICAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3IoX3NlY29uZHMgLyBTRUNPTkRTX0lOX0RBWSk7XG4gICAgICAgIF9zZWNvbmRzICU9IFNFQ09ORFNfSU5fREFZO1xuICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoX3NlY29uZHMgLyBTRUNPTkRTX0lOX0hPVVIpO1xuICAgICAgICBfc2Vjb25kcyAlPSBTRUNPTkRTX0lOX0hPVVI7XG4gICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKF9zZWNvbmRzIC8gU0VDT05EU19JTl9NSU5VVEUpO1xuICAgICAgICBfc2Vjb25kcyAlPSBTRUNPTkRTX0lOX01JTlVURTtcblxuICAgICAgICBjb25zdCBwYXJ0czogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgICAgICBpZiAoeWVhcnMgPiAwKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHllYXJzICsgKHllYXJzID09PSAxID8gYCAke1lFQVJ9YCA6IGAgJHtZRUFSU31gKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9udGhzID4gMCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChtb250aHMgKyAobW9udGhzID09PSAxID8gYCAke01PTlRIfWAgOiBgICR7TU9OVEhTfWApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXlzID4gMCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChkYXlzICsgKGRheXMgPT09IDEgPyBgICR7REFZfWAgOiBgICR7REFZU31gKSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHBhcnRzLnB1c2goYCR7aG91cnMgPCAxMCA/ICcwJyArIGhvdXJzIDogaG91cnN9OiR7bWludXRlcyA8IDEwID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXN9OiR7X3NlY29uZHMgPCAxMCA/ICcwJyArIE1hdGgudHJ1bmMoX3NlY29uZHMpIDogTWF0aC50cnVuYyhfc2Vjb25kcyl9YCk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyAnKTtcbiAgICB9XG59XG4iXX0=