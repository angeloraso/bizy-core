import { Component, ViewChild, Inject, ElementRef, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/scrolling";
// FIX: This components fixes the bug with Angular CDK virtual scrolling not supporting content projection.
// https://github.com/angular/components/issues/15277
export class BizyTableScrollingComponent {
    document;
    elementRef;
    content;
    #view;
    items$;
    itemTemplate;
    itemSize;
    constructor(document, elementRef) {
        this.document = document;
        this.elementRef = elementRef;
    }
    /** Called by the virtual-for directive inside of the viewport. */
    attachView(tableDirective) {
        if (this.#view) {
            return;
        }
        let itemSize = 30;
        const rowHeight = getComputedStyle(this.document.documentElement).getPropertyValue('--bizy-table-row-height');
        const fontSize = getComputedStyle(this.document.documentElement).getPropertyValue('font-size');
        const gap = Number(fontSize.split('px')[0]) * 0.1;
        if (rowHeight && rowHeight.includes('rem')) {
            itemSize = Number(fontSize.split('px')[0]) * Number(rowHeight.split('rem')[0]);
        }
        else if (rowHeight && rowHeight.includes('px')) {
            itemSize = Number(rowHeight.split('px')[0]);
        }
        this.itemSize = itemSize + gap;
        this.items$ = tableDirective.items$;
        this.itemTemplate = tableDirective.template;
        this.#view = tableDirective.viewContainerRef;
        this.#view.createEmbeddedView(this.content);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyTableScrollingComponent, deps: [{ token: DOCUMENT }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BizyTableScrollingComponent, selector: "bizy-table-scrolling", viewQueries: [{ propertyName: "content", first: true, predicate: ["tableScrollingContent"], descendants: true }], ngImport: i0, template: "<cdk-virtual-scroll-viewport \n    [itemSize]=\"itemSize\"\n    [minBufferPx]=\"itemSize + (itemSize * 20)\"\n    [maxBufferPx]=\"itemSize + (itemSize * 40)\">\n    \n    <ng-content></ng-content>\n\n    <ng-template #tableScrollingContent>\n      <ng-template let-item cdkVirtualFor [cdkVirtualForOf]=\"items$ | async\">\n        <ng-template *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-template>\n      </ng-template>\n    </ng-template>\n</cdk-virtual-scroll-viewport>", styles: ["::ng-deep .cdk-virtual-scrollable{height:100%;width:100%;overflow-y:auto!important;overflow-x:hidden!important;contain:inline-size!important}::ng-deep .cdk-virtual-scrollable::-webkit-scrollbar{width:.5rem;height:.5rem}::ng-deep .cdk-virtual-scrollable::-webkit-scrollbar-thumb{border-radius:1rem;background-color:var(--bizy-table-scroll-bar-color)}::ng-deep .cdk-virtual-scrollable::-webkit-scrollbar-button{height:1rem}\n"], dependencies: [{ kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { kind: "directive", type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { kind: "component", type: i2.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyTableScrollingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bizy-table-scrolling', template: "<cdk-virtual-scroll-viewport \n    [itemSize]=\"itemSize\"\n    [minBufferPx]=\"itemSize + (itemSize * 20)\"\n    [maxBufferPx]=\"itemSize + (itemSize * 40)\">\n    \n    <ng-content></ng-content>\n\n    <ng-template #tableScrollingContent>\n      <ng-template let-item cdkVirtualFor [cdkVirtualForOf]=\"items$ | async\">\n        <ng-template *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-template>\n      </ng-template>\n    </ng-template>\n</cdk-virtual-scroll-viewport>", styles: ["::ng-deep .cdk-virtual-scrollable{height:100%;width:100%;overflow-y:auto!important;overflow-x:hidden!important;contain:inline-size!important}::ng-deep .cdk-virtual-scrollable::-webkit-scrollbar{width:.5rem;height:.5rem}::ng-deep .cdk-virtual-scrollable::-webkit-scrollbar-thumb{border-radius:1rem;background-color:var(--bizy-table-scroll-bar-color)}::ng-deep .cdk-virtual-scrollable::-webkit-scrollbar-button{height:1rem}\n"] }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { content: [{
                type: ViewChild,
                args: ['tableScrollingContent']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtc2Nyb2xsaW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi90YWJsZS90YWJsZS1zY3JvbGxpbmcvdGFibGUtc2Nyb2xsaW5nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi90YWJsZS90YWJsZS1zY3JvbGxpbmcvdGFibGUtc2Nyb2xsaW5nLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLFNBQVMsRUFFVCxTQUFTLEVBRVQsTUFBTSxFQUNOLFVBQVUsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFRM0MsMkdBQTJHO0FBQzNHLHFEQUFxRDtBQUNyRCxNQUFNLE9BQU8sMkJBQTJCO0lBVVY7SUFDQztJQVZPLE9BQU8sQ0FBc0I7SUFFakUsS0FBSyxDQUFtQjtJQUN4QixNQUFNLENBQTZCO0lBQ25DLFlBQVksQ0FBcUM7SUFFakQsUUFBUSxDQUFTO0lBRWpCLFlBQzRCLFFBQWtCLEVBQ2pCLFVBQXNCO1FBRHZCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDakIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUNoRCxDQUFDO0lBRUosa0VBQWtFO0lBQzNELFVBQVUsQ0FBQyxjQUEyQztRQUMzRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxPQUFPO1NBQ1I7UUFFRCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzlHLE1BQU0sUUFBUSxHQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEcsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDbEQsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hGO2FBQU0sSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoRCxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO1FBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLGdCQUFnQixDQUFDO1FBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLENBQUM7d0dBbENVLDJCQUEyQixrQkFVNUIsUUFBUSxhQUNSLFVBQVU7NEZBWFQsMkJBQTJCLDhLQ3JCeEMsbWZBWThCOzs0RkRTakIsMkJBQTJCO2tCQVJ2QyxTQUFTOytCQUNFLHNCQUFzQjs7MEJBaUI3QixNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLE1BQU07MkJBQUMsVUFBVTs0Q0FWZ0IsT0FBTztzQkFBMUMsU0FBUzt1QkFBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIEluamVjdCxcbiAgRWxlbWVudFJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCaXp5VGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuLi90YWJsZS1yb3cvdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCaXp5VGFibGVTY3JvbGxpbmdEaXJlY3RpdmUgfSBmcm9tICcuL3RhYmxlLXNjcm9sbGluZy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiaXp5LXRhYmxlLXNjcm9sbGluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi90YWJsZS1zY3JvbGxpbmcuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhYmxlLXNjcm9sbGluZy5jc3MnXVxufSlcblxuLy8gRklYOiBUaGlzIGNvbXBvbmVudHMgZml4ZXMgdGhlIGJ1ZyB3aXRoIEFuZ3VsYXIgQ0RLIHZpcnR1YWwgc2Nyb2xsaW5nIG5vdCBzdXBwb3J0aW5nIGNvbnRlbnQgcHJvamVjdGlvbi5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvaXNzdWVzLzE1Mjc3XG5leHBvcnQgY2xhc3MgQml6eVRhYmxlU2Nyb2xsaW5nQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgndGFibGVTY3JvbGxpbmdDb250ZW50JykgY29udGVudDogVGVtcGxhdGVSZWY8b2JqZWN0PjtcblxuICAjdmlldzogVmlld0NvbnRhaW5lclJlZjtcbiAgaXRlbXMkOiBPYnNlcnZhYmxlPEFycmF5PHVua25vd24+PjtcbiAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxCaXp5VGFibGVSb3dDb21wb25lbnQ+O1xuXG4gIGl0ZW1TaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgQEluamVjdChFbGVtZW50UmVmKSBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgLyoqIENhbGxlZCBieSB0aGUgdmlydHVhbC1mb3IgZGlyZWN0aXZlIGluc2lkZSBvZiB0aGUgdmlld3BvcnQuICovXG4gIHB1YmxpYyBhdHRhY2hWaWV3KHRhYmxlRGlyZWN0aXZlOiBCaXp5VGFibGVTY3JvbGxpbmdEaXJlY3RpdmUpIHtcbiAgICBpZiAodGhpcy4jdmlldykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBsZXQgaXRlbVNpemUgPSAzMDtcbiAgICBjb25zdCByb3dIZWlnaHQgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWJpenktdGFibGUtcm93LWhlaWdodCcpO1xuICAgIGNvbnN0IGZvbnRTaXplID0gIGdldENvbXB1dGVkU3R5bGUodGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpO1xuICAgIGNvbnN0IGdhcCA9IE51bWJlcihmb250U2l6ZS5zcGxpdCgncHgnKVswXSkgKiAwLjE7XG4gICAgaWYgKHJvd0hlaWdodCAmJiByb3dIZWlnaHQuaW5jbHVkZXMoJ3JlbScpKSB7XG4gICAgICBpdGVtU2l6ZSA9IE51bWJlcihmb250U2l6ZS5zcGxpdCgncHgnKVswXSkgKiBOdW1iZXIocm93SGVpZ2h0LnNwbGl0KCdyZW0nKVswXSk7XG4gICAgfSBlbHNlIGlmIChyb3dIZWlnaHQgJiYgcm93SGVpZ2h0LmluY2x1ZGVzKCdweCcpKSB7XG4gICAgICBpdGVtU2l6ZSA9IE51bWJlcihyb3dIZWlnaHQuc3BsaXQoJ3B4JylbMF0pO1xuICAgIH1cbiAgICB0aGlzLml0ZW1TaXplID0gaXRlbVNpemUgKyBnYXA7XG4gICAgdGhpcy5pdGVtcyQgPSB0YWJsZURpcmVjdGl2ZS5pdGVtcyQ7XG4gICAgdGhpcy5pdGVtVGVtcGxhdGUgPSB0YWJsZURpcmVjdGl2ZS50ZW1wbGF0ZTtcbiAgICB0aGlzLiN2aWV3ID0gdGFibGVEaXJlY3RpdmUudmlld0NvbnRhaW5lclJlZjtcbiAgICB0aGlzLiN2aWV3LmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmNvbnRlbnQpO1xuICB9XG59XG4iLCI8Y2RrLXZpcnR1YWwtc2Nyb2xsLXZpZXdwb3J0IFxuICAgIFtpdGVtU2l6ZV09XCJpdGVtU2l6ZVwiXG4gICAgW21pbkJ1ZmZlclB4XT1cIml0ZW1TaXplICsgKGl0ZW1TaXplICogMjApXCJcbiAgICBbbWF4QnVmZmVyUHhdPVwiaXRlbVNpemUgKyAoaXRlbVNpemUgKiA0MClcIj5cbiAgICBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cbiAgICA8bmctdGVtcGxhdGUgI3RhYmxlU2Nyb2xsaW5nQ29udGVudD5cbiAgICAgIDxuZy10ZW1wbGF0ZSBsZXQtaXRlbSBjZGtWaXJ0dWFsRm9yIFtjZGtWaXJ0dWFsRm9yT2ZdPVwiaXRlbXMkIHwgYXN5bmNcIj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICpuZ1RlbXBsYXRlT3V0bGV0PVwiaXRlbVRlbXBsYXRlOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogaXRlbSB9XCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbjwvY2RrLXZpcnR1YWwtc2Nyb2xsLXZpZXdwb3J0PiJdfQ==