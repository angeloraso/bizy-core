import { Component, ViewChild, ChangeDetectionStrategy, Inject, ElementRef, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/scrolling";
// FIX: This components fixes the bug with Angular CDK virtual scrolling not supporting content projection.
// https://github.com/angular/components/issues/15277
export class BizyTableScrollingComponent {
    elementRef;
    content;
    #view;
    items$;
    itemTemplate;
    itemSize;
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    /** Called by the virtual-for directive inside of the viewport. */
    attachView(tableDirective) {
        if (this.#view) {
            return;
        }
        const fontSize = window
            .getComputedStyle(this.elementRef.nativeElement)
            .getPropertyValue('font-size');
        this.itemSize = (Number(fontSize.split('px')[0]) || 14) * 2;
        this.items$ = tableDirective.items$;
        this.itemTemplate = tableDirective.template;
        this.#view = tableDirective.viewContainerRef;
        this.#view.createEmbeddedView(this.content);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyTableScrollingComponent, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: BizyTableScrollingComponent, selector: "bizy-table-scrolling", viewQueries: [{ propertyName: "content", first: true, predicate: ["tableScrollingContent"], descendants: true }], ngImport: i0, template: "<cdk-virtual-scroll-viewport \n    [itemSize]=\"itemSize\"\n    [minBufferPx]=\"itemSize + (itemSize * 20)\"\n    [maxBufferPx]=\"itemSize + (itemSize * 40)\">\n    \n    <ng-content></ng-content>\n\n    <ng-template #tableScrollingContent>\n      <ng-template let-item cdkVirtualFor [cdkVirtualForOf]=\"items$ | async\">\n        <ng-template *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-template>\n      </ng-template>\n    </ng-template>\n</cdk-virtual-scroll-viewport>", styles: ["::ng-deep .cdk-virtual-scrollable{height:100%;width:100%;overflow-y:scroll!important;overflow-x:hidden!important;contain:inline-size!important}\n"], dependencies: [{ kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { kind: "directive", type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { kind: "component", type: i2.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyTableScrollingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bizy-table-scrolling', changeDetection: ChangeDetectionStrategy.OnPush, template: "<cdk-virtual-scroll-viewport \n    [itemSize]=\"itemSize\"\n    [minBufferPx]=\"itemSize + (itemSize * 20)\"\n    [maxBufferPx]=\"itemSize + (itemSize * 40)\">\n    \n    <ng-content></ng-content>\n\n    <ng-template #tableScrollingContent>\n      <ng-template let-item cdkVirtualFor [cdkVirtualForOf]=\"items$ | async\">\n        <ng-template *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-template>\n      </ng-template>\n    </ng-template>\n</cdk-virtual-scroll-viewport>", styles: ["::ng-deep .cdk-virtual-scrollable{height:100%;width:100%;overflow-y:scroll!important;overflow-x:hidden!important;contain:inline-size!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { content: [{
                type: ViewChild,
                args: ['tableScrollingContent']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtc2Nyb2xsaW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi90YWJsZS90YWJsZS1zY3JvbGxpbmcvdGFibGUtc2Nyb2xsaW5nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi90YWJsZS90YWJsZS1zY3JvbGxpbmcvdGFibGUtc2Nyb2xsaW5nLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLFNBQVMsRUFFVCxTQUFTLEVBQ1QsdUJBQXVCLEVBRXZCLE1BQU0sRUFDTixVQUFVLEdBQ1gsTUFBTSxlQUFlLENBQUM7Ozs7QUFXdkIsMkdBQTJHO0FBQzNHLHFEQUFxRDtBQUNyRCxNQUFNLE9BQU8sMkJBQTJCO0lBVVI7SUFUTSxPQUFPLENBQXNCO0lBRWpFLEtBQUssQ0FBbUI7SUFDeEIsTUFBTSxDQUF1QjtJQUM3QixZQUFZLENBQXFDO0lBRWpELFFBQVEsQ0FBUztJQUVqQixZQUM4QixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQ2pELENBQUM7SUFFSixrRUFBa0U7SUFDM0QsVUFBVSxDQUFDLGNBQThDO1FBQzlELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFHLE1BQU07YUFDcEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7YUFDL0MsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxJQUFJLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQzt3R0EzQlUsMkJBQTJCLGtCQVU1QixVQUFVOzRGQVZULDJCQUEyQiw4S0N0QnhDLG1mQVk4Qjs7NEZEVWpCLDJCQUEyQjtrQkFUdkMsU0FBUzsrQkFDRSxzQkFBc0IsbUJBR2YsdUJBQXVCLENBQUMsTUFBTTs7MEJBZTVDLE1BQU07MkJBQUMsVUFBVTs0Q0FUZ0IsT0FBTztzQkFBMUMsU0FBUzt1QkFBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBJbmplY3QsXG4gIEVsZW1lbnRSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQml6eVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi4vdGFibGUtcm93L3RhYmxlLXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQml6eVRhYmxlU2Nyb2xsaW5nRGlyZWN0aXZlIH0gZnJvbSAnLi90YWJsZS1zY3JvbGxpbmcuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYml6eS10YWJsZS1zY3JvbGxpbmcnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFibGUtc2Nyb2xsaW5nLmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YWJsZS1zY3JvbGxpbmcuY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcblxuLy8gRklYOiBUaGlzIGNvbXBvbmVudHMgZml4ZXMgdGhlIGJ1ZyB3aXRoIEFuZ3VsYXIgQ0RLIHZpcnR1YWwgc2Nyb2xsaW5nIG5vdCBzdXBwb3J0aW5nIGNvbnRlbnQgcHJvamVjdGlvbi5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvaXNzdWVzLzE1Mjc3XG5leHBvcnQgY2xhc3MgQml6eVRhYmxlU2Nyb2xsaW5nQ29tcG9uZW50PFQ+IHtcbiAgQFZpZXdDaGlsZCgndGFibGVTY3JvbGxpbmdDb250ZW50JykgY29udGVudDogVGVtcGxhdGVSZWY8b2JqZWN0PjtcblxuICAjdmlldzogVmlld0NvbnRhaW5lclJlZjtcbiAgaXRlbXMkOiBPYnNlcnZhYmxlPEFycmF5PFQ+PjtcbiAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxCaXp5VGFibGVSb3dDb21wb25lbnQ+O1xuXG4gIGl0ZW1TaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWZcbiAgKSB7fVxuXG4gIC8qKiBDYWxsZWQgYnkgdGhlIHZpcnR1YWwtZm9yIGRpcmVjdGl2ZSBpbnNpZGUgb2YgdGhlIHZpZXdwb3J0LiAqL1xuICBwdWJsaWMgYXR0YWNoVmlldyh0YWJsZURpcmVjdGl2ZTogQml6eVRhYmxlU2Nyb2xsaW5nRGlyZWN0aXZlPFQ+KSB7XG4gICAgaWYgKHRoaXMuI3ZpZXcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgZm9udFNpemUgPSB3aW5kb3dcbiAgICAgIC5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KVxuICAgICAgLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpO1xuICAgIHRoaXMuaXRlbVNpemUgPSAoTnVtYmVyKGZvbnRTaXplLnNwbGl0KCdweCcpWzBdKSB8fCAxNCkgKiAyO1xuICAgIHRoaXMuaXRlbXMkID0gdGFibGVEaXJlY3RpdmUuaXRlbXMkO1xuICAgIHRoaXMuaXRlbVRlbXBsYXRlID0gdGFibGVEaXJlY3RpdmUudGVtcGxhdGU7XG4gICAgdGhpcy4jdmlldyA9IHRhYmxlRGlyZWN0aXZlLnZpZXdDb250YWluZXJSZWY7XG4gICAgdGhpcy4jdmlldy5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5jb250ZW50KTtcbiAgfVxufVxuIiwiPGNkay12aXJ0dWFsLXNjcm9sbC12aWV3cG9ydCBcbiAgICBbaXRlbVNpemVdPVwiaXRlbVNpemVcIlxuICAgIFttaW5CdWZmZXJQeF09XCJpdGVtU2l6ZSArIChpdGVtU2l6ZSAqIDIwKVwiXG4gICAgW21heEJ1ZmZlclB4XT1cIml0ZW1TaXplICsgKGl0ZW1TaXplICogNDApXCI+XG4gICAgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXG4gICAgPG5nLXRlbXBsYXRlICN0YWJsZVNjcm9sbGluZ0NvbnRlbnQ+XG4gICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW0gY2RrVmlydHVhbEZvciBbY2RrVmlydHVhbEZvck9mXT1cIml0ZW1zJCB8IGFzeW5jXCI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdUZW1wbGF0ZU91dGxldD1cIml0ZW1UZW1wbGF0ZTsgY29udGV4dDogeyAkaW1wbGljaXQ6IGl0ZW0gfVwiPjwvbmctdGVtcGxhdGU+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmctdGVtcGxhdGU+XG48L2Nkay12aXJ0dWFsLXNjcm9sbC12aWV3cG9ydD4iXX0=