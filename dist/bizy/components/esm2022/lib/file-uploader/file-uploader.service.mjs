import Uppy from '@uppy/core';
import { Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import es_ES from '@uppy/locales/lib/es_ES';
import en_US from '@uppy/locales/lib/en_US';
import Dashboard from '@uppy/dashboard';
import XHRUpload from '@uppy/xhr-upload';
import * as i0 from "@angular/core";
const ES = {
    ...es_ES,
    strings: {
        ...es_ES.strings,
        noDuplicates: 'Archivo duplicado: \'%{fileName}\'',
        browseFiles: 'buscar archivo',
        dropPasteFiles: 'Soltar archivo aquí, pegar o %{browse}'
    }
};
const EN = {
    ...en_US,
    strings: {
        ...en_US.strings,
        noDuplicates: 'Duplicated file: \'%{fileName}\'',
        browseFiles: 'browse file',
        dropPasteFiles: 'Drop a file here or %{browse}'
    }
};
export class BizyFileUploaderService {
    #fileLoaded = new Subject();
    #fileRemoved = new Subject();
    #upload = new Subject();
    #uploadSuccess = new Subject();
    #error = new Subject();
    #cancelAll = new Subject();
    #complete = new Subject();
    #uppy;
    get fileLoaded$() {
        return this.#fileLoaded.asObservable();
    }
    get fileRemoved$() {
        return this.#fileRemoved.asObservable();
    }
    get upload$() {
        return this.#upload.asObservable();
    }
    get uploadSuccess$() {
        return this.#uploadSuccess.asObservable();
    }
    get error$() {
        return this.#error.asObservable();
    }
    get cancelAll$() {
        return this.#cancelAll.asObservable();
    }
    get complete$() {
        return this.#complete.asObservable();
    }
    createFileUploader(data) {
        const locale = data.language === 'es' ? ES : EN;
        this.#uppy = new Uppy({
            locale,
            infoTimeout: 2500,
            restrictions: {
                maxFileSize: data.maxFileSize,
                minFileSize: data.minFileSize,
                maxTotalFileSize: data.maxTotalFileSize,
                maxNumberOfFiles: data.maxNumberOfFiles,
                minNumberOfFiles: data.minNumberOfFiles,
                allowedFileTypes: data.allowedFileTypes
            }
        })
            .use(Dashboard, {
            inline: true,
            target: `#${data.templateId}`,
            width: data.dragDropAreaWidth,
            height: data.dragDropAreaHeight,
            hideUploadButton: true,
            hidePauseResumeButton: true
        })
            .use(XHRUpload, {
            endpoint: '',
            headers: data.headers,
            getResponseData: (responseText, response) => {
                return {
                    fileId: responseText,
                    response
                };
            }
        })
            .on('file-added', file => {
            this.#fileLoaded.next(file);
        })
            .on('file-removed', file => {
            this.#fileRemoved.next(file);
        })
            .on('upload', data => {
            this.#upload.next();
        })
            .on('upload-success', (file, response) => {
            if (file) {
                this.#uploadSuccess.next({ file, response });
            }
        })
            .on('upload-error', (file, error, response) => {
            this.#error.next({ file, error, response });
        })
            .on('restriction-failed', (file, error) => {
            this.#error.next({ file, error });
        })
            .on('error', error => {
            this.#error.next({ error });
        })
            .on('cancel-all', () => {
            this.#cancelAll.next();
        })
            .on('complete', result => {
            this.#complete.next(result);
        });
    }
    load(data) {
        this.#uppy.addFile({
            name: data.file.name,
            type: data.file.type,
            data: data.file,
            meta: {
                // Optional, store the directory path of a file so Uppy can tell identical files in different directories apart.
                relativePath: data.file.webkitRelativePath,
                referenceId: data.id
            },
            source: 'Local',
            isRemote: false // Optional, set to true if actual file is not in the browser, but on some remote server, for example,
            // when using companion in combination with Instagram.
        });
    }
    upload(data) {
        this.#uppy.getPlugin('XHRUpload').setOptions({
            endpoint: data.endpoint,
            headers: data.headers ?? {}
        });
        this.#uppy.upload();
    }
    cleanAllFiles() {
        this.#uppy.cancelAll();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyFileUploaderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyFileUploaderService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyFileUploaderService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,