import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var COLOR;
(function (COLOR) {
    COLOR["DEFAULT"] = "#666666";
    COLOR["INFO"] = "#2484C6";
    COLOR["SUCCESS"] = "#65BF6C";
    COLOR["WARNING"] = "#F7A64C";
    COLOR["ERROR"] = "#EF4C59";
})(COLOR || (COLOR = {}));
export class BizyLogService {
    #lastLogTimestamp = 0;
    #log(log, color, param) {
        const difference = this.#lastLogTimestamp ? Date.now() - this.#lastLogTimestamp : 0;
        this.#lastLogTimestamp = Date.now();
        const timestampStyles = 'color: #EE5DFF';
        const logStyles = `color: ${color}; font-size: 12px;`;
        const date = new Date();
        if (param) {
            console.log(`%c${date.toLocaleString()}: %c${log} %c(+${difference}ms)`, timestampStyles, logStyles, timestampStyles, param);
        }
        else {
            console.log(`%c${date.toLocaleString()}: %c${log} %c(+${difference}ms)`, timestampStyles, logStyles, timestampStyles);
        }
    }
    debug(data, param) {
        if (typeof data === 'string') {
            this.#log(data, COLOR.DEFAULT, param);
        }
        else {
            this.#template({ ...data, param: data.param, title: 'Debug', color: COLOR.DEFAULT });
        }
    }
    info(data, param) {
        if (typeof data === 'string') {
            this.#log(data, COLOR.INFO, param);
        }
        else {
            this.#template({ ...data, param: data.param, title: 'Info', color: COLOR.INFO });
        }
    }
    success(data, param) {
        if (typeof data === 'string') {
            this.#log(data, COLOR.SUCCESS, param);
        }
        else {
            this.#template({ ...data, param: data.param, title: 'Success', color: COLOR.SUCCESS });
        }
    }
    warning(data, param) {
        if (typeof data === 'string') {
            this.#log(data, COLOR.WARNING, param);
        }
        else {
            this.#template({ ...data, param: data.param, title: 'Warning', color: COLOR.WARNING });
        }
    }
    error(data, param) {
        if (typeof data === 'string') {
            this.#log(data, COLOR.ERROR, param);
        }
        else {
            this.#template({ ...data, param: data.param, title: 'Error', color: COLOR.ERROR });
        }
    }
    /** DEPRECATED */
    templateDebug(data) {
        this.#template({ ...data, title: 'Debug', color: COLOR.DEFAULT });
    }
    /** DEPRECATED */
    templateSucc(data) {
        this.#template({ ...data, title: 'Success', color: COLOR.SUCCESS });
    }
    /** DEPRECATED */
    templateInfo(data) {
        this.#template({ ...data, title: 'Info', color: COLOR.INFO });
    }
    /** DEPRECATED */
    templateWarn(data) {
        this.#template({ ...data, title: 'Warning', color: COLOR.WARNING });
    }
    /** DEPRECATED */
    templateError(data) {
        this.#template({ ...data, title: 'Error', color: COLOR.ERROR });
    }
    #template(data) {
        const log = `(${data.title}) ${data.fileName} - ${data.functionName}`;
        this.#log(log, data.color, data.param);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyLogService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyLogService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyLogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZXJ2aWNlcy9zcmMvbGliL2xvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDLElBQUssS0FNSjtBQU5ELFdBQUssS0FBSztJQUNSLDRCQUFtQixDQUFBO0lBQ25CLHlCQUFnQixDQUFBO0lBQ2hCLDRCQUFtQixDQUFBO0lBQ25CLDRCQUFtQixDQUFBO0lBQ25CLDBCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOSSxLQUFLLEtBQUwsS0FBSyxRQU1UO0FBV0QsTUFBTSxPQUFPLGNBQWM7SUFDekIsaUJBQWlCLEdBQVcsQ0FBQyxDQUFDO0lBRTlCLElBQUksQ0FBQyxHQUFXLEVBQUUsS0FBWSxFQUFFLEtBQWM7UUFDNUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVwQyxNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxNQUFNLFNBQVMsR0FBRyxVQUFVLEtBQUssb0JBQW9CLENBQUM7UUFDdEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sR0FBRyxRQUFRLFVBQVUsS0FBSyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlIO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxD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bSAnQGFuZ3VsYXIvY29yZSc7XG5cbmVudW0gQ09MT1Ige1xuICBERUZBVUxUID0gJyM2NjY2NjYnLFxuICBJTkZPID0gJyMyNDg0QzYnLFxuICBTVUNDRVNTID0gJyM2NUJGNkMnLFxuICBXQVJOSU5HID0gJyNGN0E2NEMnLFxuICBFUlJPUiA9ICcjRUY0QzU5J1xufVxuXG5pbnRlcmZhY2UgSUxvZ0RhdGEge1xuICBmaWxlTmFtZTogc3RyaW5nO1xuICBmdW5jdGlvbk5hbWU6IHN0cmluZztcbiAgcGFyYW0/OiB1bmtub3duXG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJpenlMb2dTZXJ2aWNlIHtcbiAgI2xhc3RMb2dUaW1lc3RhbXA6IG51bWJlciA9IDA7XG5cbiAgI2xvZyhsb2c6IHN0cmluZywgY29sb3I6IENPTE9SLCBwYXJhbTogdW5rbm93bik6IHZvaWQge1xuICAgIGNvbnN0IGRpZmZlcmVuY2UgPSB0aGlzLiNsYXN0TG9nVGltZXN0YW1wID8gRGF0ZS5ub3coKSAtIHRoaXMuI2xhc3RMb2dUaW1lc3RhbXAgOiAwO1xuICAgIHRoaXMuI2xhc3RMb2dUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3QgdGltZXN0YW1wU3R5bGVzID0gJ2NvbG9yOiAjRUU1REZGJztcbiAgICBjb25zdCBsb2dTdHlsZXMgPSBgY29sb3I6ICR7Y29sb3J9OyBmb250LXNpemU6IDEycHg7YDtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGNvbnNvbGUubG9nKGAlYyR7ZGF0ZS50b0xvY2FsZVN0cmluZygpfTogJWMke2xvZ30gJWMoKyR7ZGlmZmVyZW5jZX1tcylgLCB0aW1lc3RhbXBTdHlsZXMsIGxvZ1N0eWxlcywgdGltZXN0YW1wU3R5bGVzLCBwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGAlYyR7ZGF0ZS50b0xvY2FsZVN0cmluZygpfTogJWMke2xvZ30gJWMoKyR7ZGlmZmVyZW5jZX1tcylgLCB0aW1lc3RhbXBTdHlsZXMsIGxvZ1N0eWxlcywgdGltZXN0YW1wU3R5bGVzKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZyhkYXRhOiBzdHJpbmcgfCBJTG9nRGF0YSwgcGFyYW0/OiB1bmtub3duKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy4jbG9nKGRhdGEsIENPTE9SLkRFRkFVTFQsIHBhcmFtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jdGVtcGxhdGUoeyAuLi5kYXRhLCBwYXJhbTogZGF0YS5wYXJhbSwgdGl0bGU6ICdEZWJ1ZycsIGNvbG9yOiBDT0xPUi5ERUZBVUxUIH0pO1xuICAgIH1cbiAgfVxuXG4gIGluZm8oZGF0YTogc3RyaW5nIHwgSUxvZ0RhdGEsIHBhcmFtPzogdW5rbm93bik6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuI2xvZyhkYXRhLCBDT0xPUi5JTkZPLCBwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI3RlbXBsYXRlKHsgLi4uZGF0YSwgcGFyYW06IGRhdGEucGFyYW0sIHRpdGxlOiAnSW5mbycsIGNvbG9yOiBDT0xPUi5JTkZPIH0pO1xuICAgIH1cbiAgfVxuXG4gIHN1Y2Nlc3MoZGF0YTogc3RyaW5nIHwgSUxvZ0RhdGEsIHBhcmFtPzogdW5rbm93bik6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuI2xvZyhkYXRhLCBDT0xPUi5TVUNDRVNTLCBwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI3RlbXBsYXRlKHsgLi4uZGF0YSwgcGFyYW06IGRhdGEucGFyYW0sIHRpdGxlOiAnU3VjY2VzcycsIGNvbG9yOiBDT0xPUi5TVUNDRVNTIH0pO1xuICAgIH1cbiAgfVxuXG4gIHdhcm5pbmcoZGF0YTogc3RyaW5nIHwgSUxvZ0RhdGEsIHBhcmFtPzogdW5rbm93bik6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuI2xvZyhkYXRhLCBDT0xPUi5XQVJOSU5HLCBwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI3RlbXBsYXRlKHsgLi4uZGF0YSwgcGFyYW06IGRhdGEucGFyYW0sIHRpdGxlOiAnV2FybmluZycsIGNvbG9yOiBDT0xPUi5XQVJOSU5HIH0pO1xuICAgIH1cbiAgfVxuXG4gIGVycm9yKGRhdGE6IHN0cmluZyB8IElMb2dEYXRhLCBwYXJhbT86IHVua25vd24pOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLiNsb2coZGF0YSwgQ09MT1IuRVJST1IsIHBhcmFtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jdGVtcGxhdGUoeyAuLi5kYXRhLCBwYXJhbTogZGF0YS5wYXJhbSwgdGl0bGU6ICdFcnJvcicsIGNvbG9yOiBDT0xPUi5FUlJPUiB9KTtcbiAgICB9XG4gIH1cbiAgLyoqIERFUFJFQ0FURUQgKi9cbiAgdGVtcGxhdGVEZWJ1ZyhkYXRhOiBJTG9nRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuI3RlbXBsYXRlKHsgLi4uZGF0YSwgdGl0bGU6ICdEZWJ1ZycsIGNvbG9yOiBDT0xPUi5ERUZBVUxUIH0pO1xuICB9XG4gIC8qKiBERVBSRUNBVEVEICovXG4gIHRlbXBsYXRlU3VjYyhkYXRhOiBJTG9nRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuI3RlbXBsYXRlKHsgLi4uZGF0YSwgdGl0bGU6ICdTdWNjZXNzJywgY29sb3I6IENPTE9SLlNVQ0NFU1MgfSk7XG4gIH1cbiAgLyoqIERFUFJFQ0FURUQgKi9cbiAgdGVtcGxhdGVJbmZvKGRhdGE6IElMb2dEYXRhKTogdm9pZCB7XG4gICAgdGhpcy4jdGVtcGxhdGUoeyAuLi5kYXRhLCB0aXRsZTogJ0luZm8nLCBjb2xvcjogQ09MT1IuSU5GTyB9KTtcbiAgfVxuICAvKiogREVQUkVDQVRFRCAqL1xuICB0ZW1wbGF0ZVdhcm4oZGF0YTogSUxvZ0RhdGEpOiB2b2lkIHtcbiAgICB0aGlzLiN0ZW1wbGF0ZSh7IC4uLmRhdGEsIHRpdGxlOiAnV2FybmluZycsIGNvbG9yOiBDT0xPUi5XQVJOSU5HIH0pO1xuICB9XG4gIC8qKiBERVBSRUNBVEVEICovXG4gIHRlbXBsYXRlRXJyb3IoZGF0YTogSUxvZ0RhdGEpOiB2b2lkIHtcbiAgICB0aGlzLiN0ZW1wbGF0ZSh7IC4uLmRhdGEsIHRpdGxlOiAnRXJyb3InLCBjb2xvcjogQ09MT1IuRVJST1IgfSk7XG4gIH1cblxuICAjdGVtcGxhdGUoZGF0YTogeyBmaWxlTmFtZTogc3RyaW5nOyBmdW5jdGlvbk5hbWU6IHN0cmluZzsgdGl0bGU6IHN0cmluZywgY29sb3I6IENPTE9SOyBwYXJhbT86IHVua25vd24gfSk6IHZvaWQge1xuICAgIGNvbnN0IGxvZyA9IGAoJHtkYXRhLnRpdGxlfSkgJHtkYXRhLmZpbGVOYW1lfSAtICR7ZGF0YS5mdW5jdGlvbk5hbWV9YDtcbiAgICB0aGlzLiNsb2cobG9nLCBkYXRhLmNvbG9yLCBkYXRhLnBhcmFtKTtcbiAgfVxufVxuIl19