import { Inject, Injectable } from '@angular/core';
import { BizyToastWrapperComponent } from './toast-wrapper/toast-wrapper.component';
import { Dialog } from '@angular/cdk/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/dialog";
export var TOAST;
(function (TOAST) {
    TOAST["DEFAULT"] = "default";
    TOAST["SUCCESS"] = "success";
    TOAST["INFO"] = "info";
    TOAST["WARNING"] = "warning";
    TOAST["DANGER"] = "danger";
})(TOAST || (TOAST = {}));
export class BizyToastService {
    dialog;
    #toasts = new Set();
    duration = 3000;
    defaultSuccessTitle = 'Operación exitosa';
    defaultDangerTitle = 'Hubo un problema';
    constructor(dialog) {
        this.dialog = dialog;
    }
    #open(data) {
        const id = `bizy-toast-${Math.random()}`;
        const toastRef = this.dialog.open(BizyToastWrapperComponent, {
            id,
            data: {
                type: data.type,
                duration: this.duration,
                id,
                title: typeof data.data === 'string' ? data.data : data.data.title,
                msg: typeof data.data === 'string' ? '' : data.data.msg
            },
            autoFocus: false,
            hasBackdrop: false,
            disableClose: false,
            panelClass: ['bizy-toast', 'bizy-toast--in']
        });
        this.#toasts.add(toastRef);
    }
    config(data) {
        if (!data) {
            return;
        }
        if (data.defaultSuccessTitle) {
            this.defaultSuccessTitle = data.defaultSuccessTitle;
        }
        if (data.defaultDangerTitle) {
            this.defaultDangerTitle = data.defaultDangerTitle;
        }
        if (data.duration) {
            this.duration = data.duration;
        }
    }
    default(data) {
        this.#open({ type: TOAST.DEFAULT, data });
    }
    info(data) {
        this.#open({ type: TOAST.INFO, data });
    }
    success(data = this.defaultSuccessTitle) {
        this.#open({ type: TOAST.SUCCESS, data });
    }
    warning(data) {
        this.#open({ type: TOAST.WARNING, data });
    }
    danger(data = this.defaultDangerTitle) {
        this.#open({ type: TOAST.DANGER, data });
    }
    close = (id) => {
        if (!id) {
            return;
        }
        let toastRef = null;
        toastRef = Array.from(this.#toasts).find(_toastRef => _toastRef.id === id);
        if (toastRef) {
            toastRef.removePanelClass('bizy-toast--in');
            toastRef.addPanelClass('bizy-toast--out');
            setTimeout(() => {
                toastRef.close();
                this.#toasts.delete(toastRef);
            }, 500);
        }
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyToastService, deps: [{ token: Dialog }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyToastService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyToastService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Dialog, decorators: [{
                    type: Inject,
                    args: [Dialog]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NlcnZpY2VzL3NyYy9saWIvdG9hc3QvdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNwRixPQUFPLEVBQUUsTUFBTSxFQUEyQixNQUFNLHFCQUFxQixDQUFDOzs7QUFFdEUsTUFBTSxDQUFOLElBQVksS0FNWDtBQU5ELFdBQVksS0FBSztJQUNmLDRCQUFtQixDQUFBO0lBQ25CLDRCQUFtQixDQUFBO0lBQ25CLHNCQUFhLENBQUE7SUFDYiw0QkFBbUIsQ0FBQTtJQUNuQiwwQkFBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTlcsS0FBSyxLQUFMLEtBQUssUUFNaEI7QUFHRCxNQUFNLE9BQU8sZ0JBQWdCO0lBT1M7SUFOcEMsT0FBTyxHQUFHLElBQUksR0FBRyxFQUF3QyxDQUFDO0lBRTFELFFBQVEsR0FBVyxJQUFJLENBQUM7SUFDeEIsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7SUFDMUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7SUFFeEMsWUFBb0MsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBSSxDQUFDO0lBRXZELEtBQUssQ0FBQyxJQUFrRTtRQUV0RSxNQUFNLEVBQUUsR0FBRyxjQUFjLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFHO1lBQzVELEVBQUU7WUFDRixJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFD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QUNoQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDVDtJQUNILENBQUMsQ0FBQTt3R0FyRlUsZ0JBQWdCLGtCQU9QLE1BQU07NEdBUGYsZ0JBQWdCOzs0RkFBaEIsZ0JBQWdCO2tCQUQ1QixVQUFVOzswQkFRSSxNQUFNOzJCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJpenlUb2FzdFdyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuL3RvYXN0LXdyYXBwZXIvdG9hc3Qtd3JhcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9nLCBEaWFsb2dDb25maWcsIERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kaWFsb2cnO1xuXG5leHBvcnQgZW51bSBUT0FTVCB7XG4gIERFRkFVTFQgPSAnZGVmYXVsdCcsXG4gIFNVQ0NFU1MgPSAnc3VjY2VzcycsXG4gIElORk8gPSAnaW5mbycsXG4gIFdBUk5JTkcgPSAnd2FybmluZycsXG4gIERBTkdFUiA9ICdkYW5nZXInXG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCaXp5VG9hc3RTZXJ2aWNlIHtcbiAgI3RvYXN0cyA9IG5ldyBTZXQ8RGlhbG9nUmVmPEJpenlUb2FzdFdyYXBwZXJDb21wb25lbnQ+PigpO1xuICBcbiAgZHVyYXRpb246IG51bWJlciA9IDMwMDA7XG4gIGRlZmF1bHRTdWNjZXNzVGl0bGUgPSAnT3BlcmFjacOzbiBleGl0b3NhJztcbiAgZGVmYXVsdERhbmdlclRpdGxlID0gJ0h1Ym8gdW4gcHJvYmxlbWEnO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRGlhbG9nKSBwcml2YXRlIGRpYWxvZzogRGlhbG9nKSB7IH1cblxuICAjb3BlbihkYXRhOiB7dHlwZTogVE9BU1QsIGRhdGE6IHN0cmluZyB8IHt0aXRsZTogc3RyaW5nLCBtc2c/OiBzdHJpbmd9IH0pIHtcblxuICAgIGNvbnN0IGlkID0gYGJpenktdG9hc3QtJHtNYXRoLnJhbmRvbSgpfWA7XG4gICAgY29uc3QgdG9hc3RSZWYgPSB0aGlzLmRpYWxvZy5vcGVuKEJpenlUb2FzdFdyYXBwZXJDb21wb25lbnQsICh7XG4gICAgICBpZCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdHlwZTogZGF0YS50eXBlLFxuICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgICAgaWQsXG4gICAgICAgIHRpdGxlOiB0eXBlb2YgZGF0YS5kYXRhID09PSAnc3RyaW5nJyA/IGRhdGEuZGF0YSA6IGRhdGEuZGF0YS50aXRsZSxcbiAgICAgICAgbXNnOiB0eXBlb2YgZGF0YS5kYXRhID09PSAnc3RyaW5nJyA/ICcnIDogZGF0YS5kYXRhLm1zZ1xuICAgICAgfSxcbiAgICAgIGF1dG9Gb2N1czogZmFsc2UsXG4gICAgICBoYXNCYWNrZHJvcDogZmFsc2UsXG4gICAgICBkaXNhYmxlQ2xvc2U6IGZhbHNlLFxuICAgICAgcGFuZWxDbGFzczogWydiaXp5LXRvYXN0JywgJ2JpenktdG9hc3QtLWluJ10gXG4gICAgfSBhcyBEaWFsb2dDb25maWc8dW5rbm93biwgRGlhbG9nUmVmPEJpenlUb2FzdFdyYXBwZXJDb21wb25lbnQ+PikpO1xuXG4gICAgdGhpcy4jdG9hc3RzLmFkZCh0b2FzdFJlZik7XG4gIH1cblxuICBjb25maWcoZGF0YToge2RlZmF1bHRTdWNjZXNzVGl0bGU/OiBzdHJpbmcsIGRlZmF1bHREYW5nZXJUaXRsZT86IHN0cmluZywgZHVyYXRpb24/OiBudW1iZXJ9KSB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuZGVmYXVsdFN1Y2Nlc3NUaXRsZSkge1xuICAgICAgdGhpcy5kZWZhdWx0U3VjY2Vzc1RpdGxlID0gZGF0YS5kZWZhdWx0U3VjY2Vzc1RpdGxlO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmRlZmF1bHREYW5nZXJUaXRsZSkge1xuICAgICAgdGhpcy5kZWZhdWx0RGFuZ2VyVGl0bGUgPSBkYXRhLmRlZmF1bHREYW5nZXJUaXRsZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5kdXJhdGlvbikge1xuICAgICAgdGhpcy5kdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG4gICAgfVxuICB9XG5cbiAgZGVmYXVsdChkYXRhOiBzdHJpbmcgfCB7dGl0bGU6IHN0cmluZywgbXNnPzogc3RyaW5nfSkge1xuICAgIHRoaXMuI29wZW4oe3R5cGU6IFRPQVNULkRFRkFVTFQsIGRhdGF9KTtcbiAgfVxuXG4gIGluZm8oZGF0YTogc3RyaW5nIHwge3RpdGxlOiBzdHJpbmcsIG1zZz86IHN0cmluZ30pIHtcbiAgICB0aGlzLiNvcGVuKHt0eXBlOiBUT0FTVC5JTkZPLCBkYXRhfSk7XG4gIH1cblxuICBzdWNjZXNzKGRhdGE6IHN0cmluZyB8IHt0aXRsZTogc3RyaW5nLCBtc2c/OiBzdHJpbmd9ID0gdGhpcy5kZWZhdWx0U3VjY2Vzc1RpdGxlKSB7XG4gICAgdGhpcy4jb3Blbih7dHlwZTogVE9BU1QuU1VDQ0VTUywgZGF0YX0pO1xuICB9XG5cbiAgd2FybmluZyhkYXRhOiBzdHJpbmcgfCB7dGl0bGU6IHN0cmluZywgbXNnPzogc3RyaW5nfSkge1xuICAgIHRoaXMuI29wZW4oe3R5cGU6IFRPQVNULldBUk5JTkcsIGRhdGF9KTtcbiAgfVxuXG4gIGRhbmdlcihkYXRhOiBzdHJpbmcgfCB7dGl0bGU6IHN0cmluZywgbXNnPzogc3RyaW5nfSA9IHRoaXMuZGVmYXVsdERhbmdlclRpdGxlKSB7XG4gICAgdGhpcy4jb3Blbih7dHlwZTogVE9BU1QuREFOR0VSLCBkYXRhfSk7XG4gIH1cblxuICBjbG9zZSA9IChpZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCAhaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdG9hc3RSZWY6IERpYWxvZ1JlZjxCaXp5VG9hc3RXcmFwcGVyQ29tcG9uZW50PiB8IG51bGwgPSBudWxsO1xuICAgIHRvYXN0UmVmID0gQXJyYXkuZnJvbSh0aGlzLiN0b2FzdHMpLmZpbmQoX3RvYXN0UmVmID0+IF90b2FzdFJlZi5pZCA9PT0gaWQpO1xuXG4gICAgaWYgKHRvYXN0UmVmKSB7XG4gICAgICB0b2FzdFJlZi5yZW1vdmVQYW5lbENsYXNzKCdiaXp5LXRvYXN0LS1pbicpO1xuICAgICAgdG9hc3RSZWYuYWRkUGFuZWxDbGFzcygnYml6eS10b2FzdC0tb3V0Jyk7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0b2FzdFJlZi5jbG9zZSgpO1xuICAgICAgICB0aGlzLiN0b2FzdHMuZGVsZXRlKHRvYXN0UmVmKTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfVxuICB9XG59Il19