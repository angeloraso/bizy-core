import { Inject, Injectable } from '@angular/core';
import { BizyToastWrapperComponent } from './toast-wrapper/toast-wrapper.component';
import { Dialog } from '@angular/cdk/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/dialog";
export var TOAST;
(function (TOAST) {
    TOAST["DEFAULT"] = "default";
    TOAST["SUCCESS"] = "success";
    TOAST["INFO"] = "info";
    TOAST["WARNING"] = "warning";
    TOAST["DANGER"] = "danger";
})(TOAST || (TOAST = {}));
export class BizyToastService {
    dialog;
    #toast = null;
    #closing = false;
    constructor(dialog) {
        this.dialog = dialog;
    }
    #open(data) {
        this.#toast = this.dialog.open(BizyToastWrapperComponent, {
            data: {
                type: data.type,
                title: typeof data.data === 'string' ? data.data : data.data.title,
                msg: typeof data.data === 'string' ? '' : data.data.msg
            },
            autoFocus: true,
            hasBackdrop: false,
            disableClose: false,
            panelClass: ['bizy-toast', 'bizy-toast--in']
        });
        setTimeout(() => {
            this.close();
        }, 3000);
    }
    default(data) {
        this.#open({ type: TOAST.DEFAULT, data });
    }
    info(data) {
        this.#open({ type: TOAST.INFO, data });
    }
    success(data = 'Operación exitosa') {
        this.#open({ type: TOAST.SUCCESS, data });
    }
    warning(data) {
        this.#open({ type: TOAST.WARNING, data });
    }
    danger(data = 'Hubo un problema') {
        this.#open({ type: TOAST.DANGER, data });
    }
    close = () => {
        if (!this.#toast || this.#closing) {
            return;
        }
        this.#closing = true;
        this.#toast.removePanelClass('bizy-toast--in');
        this.#toast.addPanelClass('bizy-toast--out');
        setTimeout(() => {
            this.#toast.close();
            this.#toast = null;
            this.#closing = false;
        }, 400);
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyToastService, deps: [{ token: Dialog }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyToastService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BizyToastService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Dialog, decorators: [{
                    type: Inject,
                    args: [Dialog]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NlcnZpY2VzL3NyYy9saWIvdG9hc3QvdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNwRixPQUFPLEVBQUUsTUFBTSxFQUEyQixNQUFNLHFCQUFxQixDQUFDOzs7QUFFdEUsTUFBTSxDQUFOLElBQVksS0FNWDtBQU5ELFdBQVksS0FBSztJQUNmLDRCQUFtQixDQUFBO0lBQ25CLDRCQUFtQixDQUFBO0lBQ25CLHNCQUFhLENBQUE7SUFDYiw0QkFBbUIsQ0FBQTtJQUNuQiwwQkFBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTlcsS0FBSyxLQUFMLEtBQUssUUFNaEI7QUFHRCxNQUFNLE9BQU8sZ0JBQWdCO0lBS1M7SUFKcEMsTUFBTSxHQUFnRCxJQUFJLENBQUM7SUFFM0QsUUFBUSxHQUFZLEtBQUssQ0FBQztJQUUxQixZQUFvQyxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFJLENBQUM7SUFFdkQsS0FBSyxDQUFDLElBQWtFO1FBRXRFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQTRCLHlCQUF5QixFQUFHO1lBQ3BGLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsS0FBSyxFQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztnQkFDbEUsR0FBRyxFQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO2FBQ3hEO1lBQ0QsU0FBUyxFQUFFLElBQUk7WUFDZixXQUFXLEVBQUUsS0FBSztZQUNsQixZQUFZLEVBQUUsS0FBSztZQUNuQixVQUFVLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUM7U0FDbUIsQ0FBQyxDQUFDO1FBRW5FLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQTRDO1FBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBNEM7UUFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUErQyxtQkFBbUI7UUFDeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUE0QztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQStDLGtCQUFrQjtRQUN0RSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsS0FBSyxHQUFHLEdBQUcsRUFBRTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakMsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFN0MsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDeEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsQ0FBQyxDQUFBO3dHQTdEVSxnQkFBZ0Isa0JBS1AsTUFBTTs0R0FMZixnQkFBZ0I7OzRGQUFoQixnQkFBZ0I7a0JBRDVCLFVBQVU7OzBCQU1JLE1BQU07MkJBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQml6eVRvYXN0V3JhcHBlckNvbXBvbmVudCB9IGZyb20gJy4vdG9hc3Qtd3JhcHBlci90b2FzdC13cmFwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEaWFsb2csIERpYWxvZ0NvbmZpZywgRGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2RpYWxvZyc7XG5cbmV4cG9ydCBlbnVtIFRPQVNUIHtcbiAgREVGQVVMVCA9ICdkZWZhdWx0JyxcbiAgU1VDQ0VTUyA9ICdzdWNjZXNzJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgV0FSTklORyA9ICd3YXJuaW5nJyxcbiAgREFOR0VSID0gJ2Rhbmdlcidcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJpenlUb2FzdFNlcnZpY2Uge1xuICAjdG9hc3Q6IERpYWxvZ1JlZjxCaXp5VG9hc3RXcmFwcGVyQ29tcG9uZW50PiB8IG51bGwgPSBudWxsO1xuICBcbiAgI2Nsb3Npbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERpYWxvZykgcHJpdmF0ZSBkaWFsb2c6IERpYWxvZykgeyB9XG5cbiAgI29wZW4oZGF0YToge3R5cGU6IFRPQVNULCBkYXRhOiBzdHJpbmcgfCB7dGl0bGU6IHN0cmluZywgbXNnPzogc3RyaW5nfSB9KSB7XG5cbiAgICB0aGlzLiN0b2FzdCA9IHRoaXMuZGlhbG9nLm9wZW48Qml6eVRvYXN0V3JhcHBlckNvbXBvbmVudD4oQml6eVRvYXN0V3JhcHBlckNvbXBvbmVudCwgKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdHlwZTogZGF0YS50eXBlLFxuICAgICAgICB0aXRsZTogdHlwZW9mIGRhdGEuZGF0YSA9PT0gJ3N0cmluZycgPyBkYXRhLmRhdGEgOiBkYXRhLmRhdGEudGl0bGUsXG4gICAgICAgIG1zZzogdHlwZW9mIGRhdGEuZGF0YSA9PT0gJ3N0cmluZycgPyAnJyA6IGRhdGEuZGF0YS5tc2dcbiAgICAgIH0sXG4gICAgICBhdXRvRm9jdXM6IHRydWUsXG4gICAgICBoYXNCYWNrZHJvcDogZmFsc2UsXG4gICAgICBkaXNhYmxlQ2xvc2U6IGZhbHNlLFxuICAgICAgcGFuZWxDbGFzczogWydiaXp5LXRvYXN0JywgJ2JpenktdG9hc3QtLWluJ10gXG4gICAgfSBhcyBEaWFsb2dDb25maWc8dW5rbm93biwgRGlhbG9nUmVmPEJpenlUb2FzdFdyYXBwZXJDb21wb25lbnQ+PikpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSwgMzAwMCk7XG4gIH1cblxuICBkZWZhdWx0KGRhdGE6IHN0cmluZyB8IHt0aXRsZTogc3RyaW5nLCBtc2c/OiBzdHJpbmd9KSB7XG4gICAgdGhpcy4jb3Blbih7dHlwZTogVE9BU1QuREVGQVVMVCwgZGF0YX0pO1xuICB9XG5cbiAgaW5mbyhkYXRhOiBzdHJpbmcgfCB7dGl0bGU6IHN0cmluZywgbXNnPzogc3RyaW5nfSkge1xuICAgIHRoaXMuI29wZW4oe3R5cGU6IFRPQVNULklORk8sIGRhdGF9KTtcbiAgfVxuXG4gIHN1Y2Nlc3MoZGF0YTogc3RyaW5nIHwge3RpdGxlOiBzdHJpbmcsIG1zZz86IHN0cmluZ30gPSAnT3BlcmFjacOzbiBleGl0b3NhJykge1xuICAgIHRoaXMuI29wZW4oe3R5cGU6IFRPQVNULlNVQ0NFU1MsIGRhdGF9KTtcbiAgfVxuXG4gIHdhcm5pbmcoZGF0YTogc3RyaW5nIHwge3RpdGxlOiBzdHJpbmcsIG1zZz86IHN0cmluZ30pIHtcbiAgICB0aGlzLiNvcGVuKHt0eXBlOiBUT0FTVC5XQVJOSU5HLCBkYXRhfSk7XG4gIH1cblxuICBkYW5nZXIoZGF0YTogc3RyaW5nIHwge3RpdGxlOiBzdHJpbmcsIG1zZz86IHN0cmluZ30gPSAnSHVibyB1biBwcm9ibGVtYScpIHtcbiAgICB0aGlzLiNvcGVuKHt0eXBlOiBUT0FTVC5EQU5HRVIsIGRhdGF9KTtcbiAgfVxuXG4gIGNsb3NlID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy4jdG9hc3QgfHwgdGhpcy4jY2xvc2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuI2Nsb3NpbmcgPSB0cnVlO1xuXG4gICAgdGhpcy4jdG9hc3QucmVtb3ZlUGFuZWxDbGFzcygnYml6eS10b2FzdC0taW4nKTtcbiAgICB0aGlzLiN0b2FzdC5hZGRQYW5lbENsYXNzKCdiaXp5LXRvYXN0LS1vdXQnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy4jdG9hc3QuY2xvc2UoKTtcbiAgICAgIHRoaXMuI3RvYXN0ID0gbnVsbDtcbiAgICAgIHRoaXMuI2Nsb3NpbmcgPSBmYWxzZTtcbiAgICB9LCA0MDApO1xuICB9XG59Il19