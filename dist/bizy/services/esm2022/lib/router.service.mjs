import { Inject, Injectable } from '@angular/core';
import { NavigationEnd, NavigationStart, Router } from '@angular/router';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class RouterService {
    router;
    _backPath = '';
    transitionsEnd$;
    transitionsStart$;
    constructor(router) {
        this.router = router;
        this.transitionsEnd$ = this.router.events.pipe(filter(event => event instanceof NavigationEnd), map((event) => event.id), distinctUntilChanged(), map(() => this.router.routerState.snapshot.root));
        this.transitionsStart$ = this.router.events.pipe(filter(event => event instanceof NavigationStart), map((event) => event.id), distinctUntilChanged(), map(() => this.router.routerState.snapshot.root));
    }
    getURL() {
        return window.location.pathname;
    }
    getBackPath() {
        return this._backPath;
    }
    getId(activatedRoute, param) {
        return activatedRoute.snapshot.paramMap.get(param);
    }
    getQueryParam(activatedRoute, param) {
        return activatedRoute.snapshot.queryParamMap.get(param);
    }
    goTo(data) {
        this._backPath = this.getURL();
        if (data.path[0] === '/') {
            this.router.navigateByUrl(`${data.path}${this._serialize(data.params)}`, {
                replaceUrl: true
            });
            return;
        }
        const path = this.getURL();
        const index = path.indexOf('?');
        const url = index !== -1 ? path.substring(0, index) : path;
        this.router.navigateByUrl(`${url}/${data.path}${this._serialize(data.params)}`, {
            replaceUrl: true
        });
    }
    goBack() {
        if (this._backPath) {
            this.router.navigateByUrl(this._backPath, { replaceUrl: true });
            this._backPath = '';
        }
        else {
            const index = this.getURL().lastIndexOf('/');
            const backURL = this.getURL().substring(0, index);
            this.router.navigateByUrl(backURL, { replaceUrl: true });
        }
    }
    reload(force) {
        if (force) {
            window.location.reload();
        }
        else {
            this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {
                this.goTo({ path: this.getURL() });
            });
        }
    }
    _serialize(params) {
        if (!params) {
            return '';
        }
        const str = [];
        for (const param in params) {
            if (params[param]) {
                str.push(encodeURIComponent(param) + '=' + encodeURIComponent(params[param]));
            }
        }
        const queryParams = str.length > 0 ? `?${str.join('&')}` : '';
        return queryParams;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: RouterService, deps: [{ token: Router }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: RouterService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: RouterService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Router, decorators: [{
                    type: Inject,
                    args: [Router]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,